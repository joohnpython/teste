import sqlite3
import pandas as pd

# Conectar à base de dados SQLite; ela será criada se não existir
conn = sqlite3.connect('faculdade.db')

# Criar um cursor
cursor = conn.cursor()


# Caminho para o arquivo do banco de dados SQLite
database_path = 'C:/Users/Usuário/Desktop/aplicativo divide ai/faculdade.db'

# Tenta estabelecer conexão
try:
    conn = sqlite3.connect(database_path)
    print("Conexão estabelecida com sucesso.")
except sqlite3.Error as e:
    print(f"Erro ao conectar ao banco de dados: {e}")
    exit()

c = conn.cursor()

# Criar tabelas no banco de dados
try:
    c.execute('''CREATE TABLE IF NOT EXISTS Alunos (
                  Matricula INTEGER PRIMARY KEY,
                  Nome TEXT,
                  Sexo TEXT,
                  DataNascimento DATE,
                  Endereco TEXT)''')

    c.execute('''CREATE TABLE IF NOT EXISTS Professores (
                  Matricula INTEGER PRIMARY KEY,
                  Nome TEXT,
                  Idade INTEGER,
                  Graduacao TEXT)''')

    c.execute('''CREATE TABLE IF NOT EXISTS Materias (
                  CodigoMateria INTEGER PRIMARY KEY,
                  NomeMateria TEXT,
                  CodigoMatricula INTEGER,
                  MatriculaProfessor INTEGER,
                  NotaFinal REAL,
                  FOREIGN KEY (CodigoMatricula) REFERENCES Alunos (Matricula),
                  FOREIGN KEY (MatriculaProfessor) REFERENCES Professores (Matricula))''')

    conn.commit()
    print("Tabelas criadas com sucesso.")
except sqlite3.Error as e:
    print(f"Erro ao criar tabelas: {e}")
    conn.rollback()

# Função para ler tabela e confirmar leitura
def ler_tabela_e_confirmar(query, conexao):
    df = pd.read_sql_query(query, conexao)
    if df.empty:
        print("DataFrame está vazio. Verifique se a tabela existe e tem dados.")
    else:
        print("Dados carregados com sucesso.")
    return df







# Salvar (commit) as mudanças
conn.commit()

# Fechar o cursor
cursor.close()




# Ler os CSVs e criar as tabelas no banco de dados SQLite
df_alunos = pd.read_csv('alunos.csv')
df_professores = pd.read_csv('professores.csv')
df_materias = pd.read_csv('materias.csv')

df_alunos.to_sql('alunos', conn, if_exists='replace', index=False)
df_professores.to_sql('professores', conn, if_exists='replace', index=False)
df_materias.to_sql('materias', conn, if_exists='replace', index=False)



conn.close()


# Reabrir a conexão
conn = sqlite3.connect('faculdade.db')

# Ler as tabelas
df_alunos = pd.read_sql('SELECT * FROM alunos', conn)
df_professores = pd.read_sql('SELECT * FROM professores', conn)
df_materias = pd.read_sql('SELECT * FROM materias', conn)

# Supondo que df_materias já contém IDs ou matrículas que permitam a junção
# Realizar as junções necessárias
# Isso é um exemplo, você precisará ajustar de acordo com a estrutura exata de suas tabelas
df_warehouse = pd.merge(df_materias, df_alunos, on='matricula_aluno')
df_warehouse = pd.merge(df_warehouse, df_professores, on='matricula_professor', suffixes=('_aluno', '_professor'))

# Salvar o resultado em uma nova tabela
df_warehouse.to_sql('data_warehouse', conn, if_exists='replace', index=False)

# Exportar para CSV
df_warehouse.to_csv('data_warehouse.csv', index=False)

conn.close()
